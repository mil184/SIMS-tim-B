<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AvailableTours" xml:space="preserve">
    <value>Available tours</value>
  </data>
  <data name="AverageAgeQuestion" xml:space="preserve">
    <value>What is the average age of your group?</value>
  </data>
  <data name="ChosenDatesDG" xml:space="preserve">
    <value>Chosen Dates</value>
  </data>
  <data name="CommentQuestion" xml:space="preserve">
    <value>4. Add a comment:*</value>
  </data>
  <data name="ComplexTourInfo" xml:space="preserve">
    <value>Complex tours consist of more than one regular tour.</value>
  </data>
  <data name="ComplexTourOverview" xml:space="preserve">
    <value>Complex Tour Overview</value>
  </data>
  <data name="ComplexTourRequestingTab" xml:space="preserve">
    <value>Complex Tour Requesting</value>
  </data>
  <data name="ComplexTours" xml:space="preserve">
    <value>Complex Tours</value>
  </data>
  <data name="CurrentGuests" xml:space="preserve">
    <value>Current Guests:</value>
  </data>
  <data name="CurrentlyActiveCP" xml:space="preserve">
    <value>Currently Active checkpoint:</value>
  </data>
  <data name="CurrentlyActiveTour" xml:space="preserve">
    <value>Currently Active Tour:</value>
  </data>
  <data name="DGCity" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="DGCountry" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="DGCPName" xml:space="preserve">
    <value>Checkpoint Name</value>
  </data>
  <data name="DGDuration" xml:space="preserve">
    <value>Duration (hours)</value>
  </data>
  <data name="DGGuests" xml:space="preserve">
    <value>Guests</value>
  </data>
  <data name="DGGuide" xml:space="preserve">
    <value>Guide</value>
  </data>
  <data name="DGLanguage" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="DGName" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="DGOrder" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="DGSeeMore" xml:space="preserve">
    <value>See More</value>
  </data>
  <data name="Duration" xml:space="preserve">
    <value>Duration (hours):</value>
  </data>
  <data name="EndDatesDG" xml:space="preserve">
    <value>End Dates</value>
  </data>
  <data name="EndDateTime" xml:space="preserve">
    <value>End Date:</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="ExpirationDate" xml:space="preserve">
    <value>Expiration Date</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>Apply Filter</value>
  </data>
  <data name="Filtration" xml:space="preserve">
    <value>Filtration</value>
  </data>
  <data name="FiltrationInfo" xml:space="preserve">
    <value>Filtration is used to show only specific, relevant tours when you input wanted information. This way, the list of tours gets smaller, but these tours do not disappear.</value>
  </data>
  <data name="FinishedTours" xml:space="preserve">
    <value>Finished Tours</value>
  </data>
  <data name="FinishedToursInfo" xml:space="preserve">
    <value>Choose a finished tour in order to rate it.</value>
  </data>
  <data name="guestStatistic" xml:space="preserve">
    <value>Average guest count for chosen year:</value>
  </data>
  <data name="Guide" xml:space="preserve">
    <value>Guide:</value>
  </data>
  <data name="HomeTab" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Images" xml:space="preserve">
    <value>Tour Images:</value>
  </data>
  <data name="ImagesQuestion" xml:space="preserve">
    <value>5. Add one or more images:*</value>
  </data>
  <data name="InterestingnessQuestion" xml:space="preserve">
    <value>2. How interesting was this tour?*</value>
  </data>
  <data name="KnowledgeQuestion" xml:space="preserve">
    <value>1. How would you rate your tour guide's knowledge?*</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language:</value>
  </data>
  <data name="LanguageBtn" xml:space="preserve">
    <value>Show in Serbian</value>
  </data>
  <data name="languageChart" xml:space="preserve">
    <value>Language Chart</value>
  </data>
  <data name="LanguageQuestion" xml:space="preserve">
    <value>3. How would you rate your tour guide's language?*</value>
  </data>
  <data name="LanguagesDG" xml:space="preserve">
    <value>Languages</value>
  </data>
  <data name="languageStatistic" xml:space="preserve">
    <value>Number of requests for each language:</value>
  </data>
  <data name="locationChart" xml:space="preserve">
    <value>Location Chart</value>
  </data>
  <data name="LocationsDG" xml:space="preserve">
    <value>Locations</value>
  </data>
  <data name="locationStatistic" xml:space="preserve">
    <value>Number of requests for each location:</value>
  </data>
  <data name="LogOut" xml:space="preserve">
    <value>Log Out</value>
  </data>
  <data name="MaxGuests" xml:space="preserve">
    <value>Maximum guests:</value>
  </data>
  <data name="myTourRequests" xml:space="preserve">
    <value>Your Tour Requests</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="noComplexTourRequests" xml:space="preserve">
    <value>Nemate zahteve za kompleksne ture.</value>
  </data>
  <data name="NoSpacesAvailable" xml:space="preserve">
    <value>There are no spaces left for chosen tour. Here are all available tours in the same city:</value>
  </data>
  <data name="NoTourActive" xml:space="preserve">
    <value>There is no tour that is currently active.</value>
  </data>
  <data name="NoVoucher" xml:space="preserve">
    <value>I don't want to use a voucher.</value>
  </data>
  <data name="NoVouchers" xml:space="preserve">
    <value>You don't have any vouchers.</value>
  </data>
  <data name="PersonCount" xml:space="preserve">
    <value>Person Count:</value>
  </data>
  <data name="PersonCountQuestion" xml:space="preserve">
    <value>How many people are attending this tour?</value>
  </data>
  <data name="Previous" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="rateTour" xml:space="preserve">
    <value>Rate Tour</value>
  </data>
  <data name="RateTourBtn" xml:space="preserve">
    <value>Rate This Tour</value>
  </data>
  <data name="requestATour" xml:space="preserve">
    <value>Request A Tour</value>
  </data>
  <data name="requestATourBtn" xml:space="preserve">
    <value>Request a Tour</value>
  </data>
  <data name="requestComplexTour" xml:space="preserve">
    <value>Request a Complex Tour</value>
  </data>
  <data name="ReserveInfo" xml:space="preserve">
    <value>Select a tour in order to reserve it!</value>
  </data>
  <data name="ReserveTour" xml:space="preserve">
    <value>Reserve tour</value>
  </data>
  <data name="ShowMoreBtn" xml:space="preserve">
    <value>Show More</value>
  </data>
  <data name="StartDate" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="StartDatesDG" xml:space="preserve">
    <value>Start Dates</value>
  </data>
  <data name="StartDateTime" xml:space="preserve">
    <value>Start date:</value>
  </data>
  <data name="StatusDG" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="StatusesDG" xml:space="preserve">
    <value>Statuses</value>
  </data>
  <data name="Submit" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="SubmittedRegularTours" xml:space="preserve">
    <value>Submitted regular tours:</value>
  </data>
  <data name="Theme" xml:space="preserve">
    <value>Theme</value>
  </data>
  <data name="TooManyGuestsMSG1" xml:space="preserve">
    <value>You've tried adding in too many guests. There is only one space available.</value>
  </data>
  <data name="TooManyGuestsMSGMany1" xml:space="preserve">
    <value>You've tried adding in too many guests. There are only </value>
  </data>
  <data name="TooManyGuestsMSGMany2" xml:space="preserve">
    <value> spaces available.</value>
  </data>
  <data name="TourCity" xml:space="preserve">
    <value>Tour City:</value>
  </data>
  <data name="TourCountry" xml:space="preserve">
    <value>Tour Country:</value>
  </data>
  <data name="TourDesc" xml:space="preserve">
    <value>Tour Description:</value>
  </data>
  <data name="TourName" xml:space="preserve">
    <value>Tour Name:</value>
  </data>
  <data name="TourRatingTab" xml:space="preserve">
    <value>Tour Rating</value>
  </data>
  <data name="TourRequestingTab" xml:space="preserve">
    <value>Tour Requesting</value>
  </data>
  <data name="TourReservationTab" xml:space="preserve">
    <value>Tour Reservation</value>
  </data>
  <data name="TourTrackingTab" xml:space="preserve">
    <value>Tour Tracking</value>
  </data>
  <data name="TrackingInfo" xml:space="preserve">
    <value>Currently active checkpoint is highlighted.</value>
  </data>
  <data name="TrackTour" xml:space="preserve">
    <value>Tour Tracking</value>
  </data>
  <data name="VeryBad" xml:space="preserve">
    <value>Very Bad</value>
  </data>
  <data name="VeryGood" xml:space="preserve">
    <value>Very Good</value>
  </data>
  <data name="Voucher1" xml:space="preserve">
    <value>Vouchers can be used to reserve a tour.</value>
  </data>
  <data name="Voucher2" xml:space="preserve">
    <value>Vouchers can be obtained in several ways:</value>
  </data>
  <data name="Voucher3" xml:space="preserve">
    <value>By attending any 5 tours in one year. These vouchers expire in 6 months and can be used for any tour.</value>
  </data>
  <data name="Voucher4" xml:space="preserve">
    <value>When a tour guide quits or cancels a tour you reserved.</value>
  </data>
  <data name="Voucher5" xml:space="preserve">
    <value>Used or expired vouchers will no longer be visible.</value>
  </data>
  <data name="Voucher6" xml:space="preserve">
    <value>What are vouchers?</value>
  </data>
  <data name="VoucherInfo" xml:space="preserve">
    <value>- Vouchers can be used to reserve a tour.
- Vouchers can be obtained in several ways:
  - By attending any 5 tours in one year. These vouchers expire in 6 months and can be used for any tour.
  - When a tour guide quits or cancels a tour you reserved.
- Used or expired vouchers will no longer be visible.</value>
  </data>
  <data name="VouchersTab" xml:space="preserve">
    <value>Vouchers</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome to DMJM Tours! What would you like to do?</value>
  </data>
  <data name="yearStatistic" xml:space="preserve">
    <value>Tour request status statistics for chosen year:</value>
  </data>
  <data name="YourVouchers" xml:space="preserve">
    <value>Vouchers</value>
  </data>
</root>